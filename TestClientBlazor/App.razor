@using System.Threading
@implements IAsyncDisposable
@inject HubConnection HubConnection

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code 
{
    private CancellationTokenSource cancellationTokenSource = new ();

        protected override void OnInitialized()
        {
            // Launch the signalR connection in a fire and forget fashion
            #pragma warning disable CS4014
            ConnectWithRetryAsync(cancellationTokenSource.Token);

            HubConnection.Closed += error => 
                ConnectWithRetryAsync(cancellationTokenSource.Token);
        }

        private async Task<bool> ConnectWithRetryAsync(CancellationToken token)
        {
            while (true)
            {
                try
                {
                    await HubConnection.StartAsync(token);
                    return true;
                }
                catch when (token.IsCancellationRequested)
                {
                    return false;
                }
                catch
                {
                    await Task.Delay(5000);
                }
            }
        }
    
    public async ValueTask DisposeAsync()
    {
        cancellationTokenSource.Cancel();
        cancellationTokenSource.Dispose();
        await HubConnection.DisposeAsync();
    }
}