@page "/testentities"
@inject IRestService _service
@inject NavigationManager _navigationManager
@inject ToastService _toastService
@implements IAsyncDisposable


<PageTitle> Test Entities </PageTitle>

<h3> Test Entities </h3>

@if (_entities == null)
{
    <p>
        <em>Loading</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>IsComplete</th>
            <th>
                <button class="btn btn-success" @onclick="AddTestEntity">Add</button>
            </th>
        </tr>
        </thead>
        <tbody>
        @foreach (var entity in _entities)
        {
            <tr>
                <td>@entity.Name</td>
                <td>@entity.IsComplete</td>
                <td>
                    <button type="button" class="btn btn-primary" @onclick="(() => EditTestEntity(entity.Id))">
                        Edit
                        <i
                            class="oi oi-pencil">
                        </i>
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="() => DeleteTestEntity(entity.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<TestEntityDetails>? _entities;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        _entities = (await _service.GetEntities()).ToList();

        var connection = Environment.GetEnvironmentVariable("NOTIFICATION_HUB");
        Uri uri;
        if (string.IsNullOrEmpty(connection))
            uri = _navigationManager.ToAbsoluteUri("/notifications");
        else
            uri = new(connection);
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(uri)
            .Build();

        _hubConnection.On<TestEntityDetails>("TestEntityRemoved", details =>
        {
            _toastService.ShowToast($"Deleted {details.Id} outside the client.", ToastLevel.Warning);
            _entities = _entities.Where(e => e.Id != details.Id).ToList();
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<TestEntityDetails>("TestEntityEdited", details =>
        {
            _toastService.ShowToast($"Edited {details.Id} outside the client", ToastLevel.Warning);
            var edited = _entities.First(e => e.Id == details.Id);
            edited.IsComplete = details.IsComplete;
            edited.Name = details.Name;
            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<TestEntityDetails>("TestEntityAdded", details =>
        {
            _toastService.ShowToast($"Added {details.Id} outside the client", ToastLevel.Warning);
            _entities.Add(details);
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    void EditTestEntity(long id)
    {
        _navigationManager.NavigateTo($"/testentity/{id}");
    }

    void AddTestEntity()
    {
        _navigationManager.NavigateTo("/testentity/");
    }

    async Task DeleteTestEntity(long id)
    {
        var entityToDelete = _entities?.First(e => e.Id == id);
        await _service.DeleteEntity(id);
        _toastService.ShowToast($"Deleted {entityToDelete?.Name}", ToastLevel.Info);
        _entities = _entities?.Where(e => e.Id != entityToDelete?.Id).ToList();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}